/*
 * circle_draw.cpp
 *
 *  Created on: Jun 24, 2013
 *      Author: ahmed
 */


// include headers
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// define macos
#define MAX_X 99
#define MAX_Y 50


// define functions
void run();
void init_matrix(bool**&, int max_x, int max_y);
void draw_pixel(int x, int y, bool** matrix);
void fill_circle(bool** matrix, int xc, int yc, int r);

void print_matrix(bool**, int max_x, int max_y);
void delete_matrix(bool**, int max_y);
inline char str_bool(bool);

// define global variables:
// bool** matrix;

int main() {

	run();

}

void run() {

	bool** matrix = 0;
	init_matrix(matrix, MAX_X, MAX_Y);
	int r = 25;
	fill_circle(matrix, 0, 0, 10);
	fill_circle(matrix, 20, 20, 10);
	fill_circle(matrix, 40, 40, 10);

	print_matrix(matrix, MAX_X, MAX_Y);
	delete_matrix(matrix, MAX_Y);
}


void init_matrix(bool**& matrix, int max_x, int max_y) {

	printf("at %s \n", __FUNCTION__);

	matrix = new bool*[max_y];
	for (int i = 0; i < max_y; i++) {
		matrix[i] = new bool[max_x];
	}


	for (int i = 0; i < max_y; i++) {
		for (int j = 0; j < max_x; j++) {
			matrix[i][j] = element();
			
			printf("%c ", element[i][j].to_string());
			// printf("%c ", str_bool(matrix[i][j]));
		}
		printf("\n");
	
	}

}


void fill_circle(bool** matrix, int xc, int yc, int r) { 

	for (int x = -r; x < r ; x++)
	{
    	int height = (int)sqrt(r * r - x * x);

   		for (int y = -height; y < height; y++)
        draw_pixel(x + xc, y + yc, matrix);
		
	}

}

void draw_pixel(int x, int y, bool** matrix) { 

	printf("draw pixel at %d and %d \n", x, y);

	if (x < 0 || x >= MAX_Y || y < 0 || y > MAX_X) { return; }


	matrix[x][y] = true;
}

void print_matrix(bool** matrix, int max_x, int max_y) {
	

	for (int i = 0; i < max_y; i++) {
		for (int j = 0; j < max_x; j++) {
			printf("%c ", str_bool(matrix[i][j]));
		}
		printf("\n");
	
	}

}

inline char str_bool(bool b) {

	if (b) {
		return '1';
	} 
	return '0';
}

void delete_matrix(bool** matrix, int max_y) {
	for (int i = 0; i < max_y; i++) {
		delete[] matrix[i];
	}
	delete[] matrix;
}

