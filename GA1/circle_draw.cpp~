/*
 * circle_draw.cpp
 *
 *  Created on: Jun 24, 2013
 *      Author: ahmed
 */


// include headers
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// define macos
#define MAX_X 99
#define MAX_Y 50


// define functions
void run();
void init_matrix(bool**&, int max_x, int max_y);
void draw_circle(bool** matrix, int xc, int yc, int r);
void draw_circle_bershenham(bool** matrix, int xc, int yc, int r);
void draw_pixel(int x, int y, bool** matrix);
void draw_y_line(int y, int x1, int x2, bool** matrix);
void draw_x_line(int x, int y1, int y2, bool** matrix);
void draw_straight_line(int x1, int x2, int y1, int y2, bool** matrix);
void fill_circle(bool** matrix);

void print_matrix(bool**, int max_x, int max_y);
void delete_matrix(bool**, int max_y);
inline char str_bool(bool);

// define global variables:
// bool** matrix;

int main() {

	run();

}

void run() {

	bool** matrix = 0;
	init_matrix(matrix, MAX_X, MAX_Y);
	int r = 10;
	// draw_circle(matrix, 25, 50, r);
	fill_circle(matrix, 25, 50, r);
	print_matrix(matrix, MAX_X, MAX_Y);
	delete_matrix(matrix, MAX_Y);
}


void init_matrix(bool**& matrix, int max_x, int max_y) {

	printf("at %s \n", __FUNCTION__);

	matrix = new bool*[max_y];
	for (int i = 0; i < max_y; i++) {
		matrix[i] = new bool[max_x];
	}


	for (int i = 0; i < max_y; i++) {
		for (int j = 0; j < max_x; j++) {
			matrix[i][j] = false;

			printf("%c ", str_bool(matrix[i][j]));
		}
		printf("\n");
	
	}

}

void draw_circle(bool** matrix, int xc, int yc, int r) {
	draw_circle_bershenham(matrix, xc, yc, r);
}

void fill_circle(bool** matrix, int xc, int yc, int r) { 

	for (int x = -r; x < r ; x++)
	{
    	int height = (int)sqrt(r * r - x * x);

   		for (int y = -height; y < height; y++)
        draw_pixel(x + xc, y + yc, matrix);
	}

}


void draw_circle_bershenham(bool** matrix, int xc, int yc, int r) {

    int x = 0; 
    int y = r; 
    int p = 3 - 2 * r;
    if (!r) return;     

	int i = 0;
    while (y >= x) // only formulate 1/8 of circle
    {
		
		printf("at iteration %d \n", i++);
       // draw_pixel(xc-x, yc-y, matrix);//upper left left
       // draw_pixel(xc+x, yc-y, matrix);//upper right right


		draw_straight_line(xc-x, yc-y, xc+x, yc-y, matrix); 

        // draw_pixel(xc-y, yc-x, matrix);//upper upper left
        // draw_pixel(xc-y, yc+x, matrix);//lower lower left

		draw_straight_line(xc-y, yc-x, xc-y, yc+x, matrix); 


        // draw_pixel(xc+y, yc-x, matrix);//upper upper right
        // draw_pixel(xc+y, yc+x, matrix);//lower lower right


		draw_straight_line(xc+y, yc-x, xc+y, yc+x, matrix);


        // draw_pixel(xc-x, yc+y, matrix);//lower left left
        // draw_pixel(xc+x, yc+y, matrix);//lower right right

		draw_straight_line(xc-x, yc+y, xc+x, yc+y, matrix);
		

        if (p < 0) p += 4*x++ + 6; 
              else p += 4*(x++ - y--) + 10; 

		

		// if (i == 2) break; 
     } 

}

void draw_straight_line(int x1, int y1, int x2, int y2, bool** matrix) {

	printf("draw line from (%d,%d) to (%d,%d) \n", x1, y1, x2, y2);	

	if (x1 == x2) {draw_x_line(x1, y1, y2, matrix); }
	else if (y1 == y2) { draw_y_line(y1, x1, x2, matrix); }
	else { 
		printf("warning: not a straight line \n"); 
		abort();
	}
}

void draw_x_line(int x, int y1, int y2, bool** matrix) { 

	printf("x line: x:%d [y1: %d and y2: %d] \n", x, y1, y2);

	if (x < 0 || x >= MAX_Y || y1 < 0 || y1 > MAX_X || y2 < 0 || y2 > MAX_X) { return; }
	
	int y_min, y_max;
	if (y1 < y2) { y_min = y1; y_max = y2; }
	else { y_min = y2; y_max = y1; }

	for (int i = y_min; i <= y_max; i++) {
			matrix[x][i] = true;		
	}
}

void draw_y_line(int y, int x1, int x2, bool** matrix) { 
	
	printf("y line: y:%d [x1: %d and x2: %d] \n", y, x1, x2);
	
	if (y < 0 || y >= MAX_X || x1 < 0 || x1 >= MAX_Y || x2 < 0 || x2 >= MAX_Y) { return; }
	
	int x_min, x_max;
	if (x1 < x2) { x_min = x1; x_max = x2; }
	else { x_min = x2; x_max = x1; }

	for (int i = x_min; i <= x_max; i++) {
			matrix[i][y] = true;		
	}
}



void draw_pixel(int x, int y, bool** matrix) { 

	printf("draw pixel at %d and %d \n", x, y);

	if (x < 0 || x >= MAX_Y || y < 0 || y > MAX_X) { return; }


	matrix[x][y] = true;
}

void print_matrix(bool** matrix, int max_x, int max_y) {

	printf("at %s \n", __FUNCTION__);
	

	for (int i = 0; i < max_y; i++) {
		printf("%d ", i);
		for (int j = 0; j < max_x; j++) {
			printf("%c ", str_bool(matrix[i][j]));
		}
		printf("\n");
	
	}

}

inline char str_bool(bool b) {

	// printf("at %s ", __FUNCTION__);

	if (b) {
		return '1';
	} 
	return '0';
}

void delete_matrix(bool** matrix, int max_y) {
	for (int i = 0; i < max_y; i++) {
		delete[] matrix[i];
	}
	delete[] matrix;
}
